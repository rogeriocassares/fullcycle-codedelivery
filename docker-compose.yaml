version: '3'
services:
  simulator:
    restart: always
    build:
      context: ./simulator/build
      dockerfile: Dockerfile
    image: rogeriocassares/codedelivery-simulator:latest
    container_name: codedelivery-simulator
    volumes:
      - ./simulator:/go/src/
    tty: true
    networks:
      - codedelivery-network

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    networks:
      - codedelivery-network

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9094:9094"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_LISTENERS: INTERNAL://:9092,OUTSIDE://:9094
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:9092,OUTSIDE://kafka:9094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,OUTSIDE:PLAINTEXT
    networks:
      - codedelivery-network

  kafka-topics-generator:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - kafka
    command: >
      bash -c
        "sleep 5s &&
        kafka-topics --create --topic=route.new-direction --if-not-exists --bootstrap-server=kafka:9092 &&
        kafka-topics --create --topic=route.new-position --if-not-exists --bootstrap-server=kafka:9092"
    networks:
      - codedelivery-network

  control-center:
    image: confluentinc/cp-enterprise-control-center:6.0.1
    hostname: control-center
    depends_on:
      - kafka
    ports:
      - "9021:9021"
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: 'kafka:9092'
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_CONNECT_CLUSTER: http://kafka-connect:8083
      PORT: 9021
    networks:
      - codedelivery-network

  react-frontend:
    build:
      context: ./react-frontend/build
      dockerfile: Dockerfile
    ports:
      - 3001:3001
    volumes:
      - ./react-frontend/app:/home/node/app
    networks:
      - codedelivery-network

  nest-api:
    build:
      context: ./nest-api/build
      dockerfile: Dockerfile
    ports:
      - 3000:3000
    volumes:
      - ./nest-api/app:/home/node/app
    depends_on:
      - mongo
    networks:
      - codedelivery-network

  mongo:
    image: mongo:4.4.4
    restart: always
    volumes:
      - ./mongo/dbdata:/data/db
      - ./mongo:/docker-entrypoint-initdb.d
    environment:
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=root
      - MONGO_INITDB_DATABASE=nest
    networks:
      - codedelivery-network

  mongo-express:
    image: mongo-express
    restart: always
    ports:
      - 8082:8081
    environment:
      - ME_CONFIG_MONGODB_SERVER=mongo
      - ME_CONFIG_MONGODB_AUTH_USERNAME=root
      - ME_CONFIG_MONGODB_AUTH_PASSWORD=root  
      - ME_CONFIG_MONGODB_ADMINUSERNAME=root
      - ME_CONFIG_MONGODB_ADMINPASSWORD=root
    depends_on:
      - mongo
    networks:
      - codedelivery-network

networks:
  codedelivery-network:
    driver: bridge
